-- 097 --
do 
  let plies = "<25 10 20 15>"
      pat = "<1 1.5 1 2 0.75 1>"
      synth1Lfo = (range 0 40 $ slow 10 tri)
      synth2Lfo = (range 0 40 $ slow 11 tri)
  d1
    $ cpsDisc 0.5 1.5
    $ (|* gain 1.2)
    $ stack [
      -- synths
      g $ slow 8 $ fast (shiftBy 3 $ choose [1,1.1..2]) $ (# note "-24") $ pad1
      , g $ slow 7.23234 $ fast (shiftBy 3 $ choose [1,1.1..2]) $ (# note "-24") $ pad2
      , ccn 35 # ccv synth1Lfo
      , ccn 36 # ccv synth2Lfo
      -- drums
      , g $ plyWith ((plies/) $ pat) (|* gain 0.94) $ randcat [pad3, pad7, pad8, pad4] 
      -- hats
      , g $ plyWith ((plies/) $ pat) ((# pad11) . (# gain 0.8)) $ pad12
      , scene (randcat [0])
      , randcat [normDelay]
    ] # s "midi" # cps pat
  d2 -- trans
    $ (|* gain 1.1)
    $ stack [
      slow 4 $ pad6 
    ]


-- 087 --
do 
  let 
    pat = "<4 2 3 1 2 1 1 0.5>"
    period = 0
    amb1Mute = g
    amb2Mute = id
    transitionMute = g
    drumsMute = g
    snareMute = g
    times = "<5 10 20 15>"
    kickPlyFunc = (|* gain 0.94)
    hatPlyFunc = (# pad11)
    bassLfoDepth = 0
    bassLfoRate = 0
    amb2LfoRate = (range 0 127 $ slow 10 tri)
    amb2LfoDepth = (range 0 127 $ slow 11 tri)
  d1 
    $ cpsDisc 0.75 1.75
    $ someCyclesBy 0.3 rev
    $ (|* gain 1.1)
    $ (# cps pat )
    $ someCyclesBy period (within (0.5,1) (const $ struct "~ 1" $ pad4))
    $ stack [
        amb1Mute $ slow 4 $ pad6 
        , amb2Mute $ slow 4.1 $ pad5
        , transitionMute $ pad1
        , drumsMute $ plyWith ((times/) $ pat) kickPlyFunc $ pad3
        , drumsMute $ plyWith ((times/) $ pat) hatPlyFunc $ pad12
        , snareMute $ (4 ~>) $ slow 4 $ pad2
        , amb2Mute $ ccn 40 # ccv amb2LfoRate
        , amb2Mute $ ccn 41 # ccv amb2LfoDepth
        , randcat [ normDelay ]
        , slow 1 $ scene (randcat [0])
    ]
    # rytm
  d2 silence

-- unfollowed --    
d2 $ fast 2 $ unfollowed 

hush

d1 silence

-- 093 --
do 
  let pat = "<2 4.5 3 2 3 2 3.5 4>"
      times = "<20 10 10 15>"
      plyFunc = (# gain 0.75)
      period = 0
      superKick = "<0   0>"
      superHat =  "<0 0>"
      muteKick = g
      muteHat = g
      muteSynth = id
      synthFilter = (range 0 40 $ slow 30 sine)
      bendUp = (range 0 0 $ slow 11 tri)
      bendDown = (range 0 0 $ slow 10 tri)
      kickHold = (segment 1 $ shiftBy 3 $ choose [0])
      revFreq = 0
  d1  
    $ (# cps (pat * 0.5))
    $ (|* gain 1.2) 
    $ someCyclesBy revFreq rev $ shift
    $ someCyclesBy period (within (0.5,1) (const $ struct "~ 1" $ pad8)) $ shift
    $ stack [ 
      g $ muteSynth $ (|+ note (discretise (1/2) $ shiftBy 489 $ choose [0])) 
        $ (# gain 0.8) $ plyWith ((times/) $ pat) plyFunc $ superimpose (# pad2) $ pad1 -- notes
      , muteKick $ plyWith ((times/) $ pat) plyFunc $ every superKick (superimpose (# pad4)) $ pad3 -- kicks
      , muteHat $ plyWith ((times/) $ pat) plyFunc $ every superHat (superimpose (# pad12)) $ pad11 -- hats
      , pad7
      , fast 4 $ ccn 40 # ccv synthFilter
      , fast 4 $ ccn 35 # ccv bendUp
      , fast 4 $ ccn 36 # ccv bendDown
      , fast 4 $ ccn 37 # ccv kickHold
      , randcat [normDelay]
      , scene (randcat [0])
      , slow 2 $ pad6 -- out
      , slow 1.47 $ pad9 -- out
      , slow 1.52 $ pad5 --out
      ] # rytm


-- trans on 093
do
  d2 $ cantsynth # cps (160/120/2)
  d1 
    $ stack [
      slow 1.47 $ pad9
      , slow 1.52 $ pad5 ] # rytm # cps (160/120/2) # gain 1.2

d1 silence 

-- 096 cant --

do
  let 
    plies = (slow 2 $ "<3 3 5>") :: Pattern (Ratio Integer)
    denom = ((discretise (1/8) $ slow 389 $ choose [4])) :: Pattern (Ratio Integer)
    period = 0
    kickMute = id
    kickPlyFunc= (|* gain 0.9)
    hatPlyFunc = (# pad11)
    hatMute = g
    rollMute = g
    percMute = g
  d1
    $ (|* gain 1.2)
    $ someCyclesBy period (within (0.625,1) (const $ s "~ [~ midi ~ ~]" # note "-24" # midichan 3))
    $ stack [
      kickMute $ plyWith plies kickPlyFunc 
        $ slow (plies/denom) $ fast 2 $ midichan 2 # note "-36"
      ,  hatMute $ plyWith plies hatPlyFunc
        $ slow (plies/denom) $ fast 2 $ pad12
      , rollMute $ rollSlow 1 $ pad5
      , percMute $ (# gain (range 0.7 1.1 $ shrand 74)) 
        $ (# midichan (shiftBy 89 $ choose [6,7])) 
        $ plyWith plies id $ slow (plies/denom) $ fast 2 $ pan 1
        # note "-24" 
      , normDelay
      , scene 0
    ] # s "midi" # cps (160/120/2)
  d2 $ cantsynth

  d2 silence

-- 099 --
do 
  let plies = "<10 20 15 25>"
      denom = "<8 4 6 4 8>"
      pat = "<2 1 1.5 1 2 2.5 0.5 0.5>"
      period = 0
  d1 
    $ cpsDisc 0.75 2
    $ (|* gain 1.2)
    $ someCyclesBy period (within (0.75,1) (const $ pan "~ ~ ~ 1" # pad4 # s "midi"))
    $ shift
    $ someCyclesBy 0.4 rev
    $ stack [
      -- kick
        g $ plyWith plies (|* gain 0.93) $ slow (plies/denom) $ pad3           
      -- hat
      , g $ plyWith plies ((|* gain 0.93) . (# pad11)) $ slow (plies/denom) $ pad12
      -- pad
      , g $ (|+ note (shiftBy 489 $ choose [0,12,2,-10])) $ pad6
      -- synth 2
      , g $ (|+ note (shiftBy 489 $ choose [0,-12,2,-10])) $ plyWith 2 id $ pad2
      -- perc
      , g $ degradeBy 0.3 $ shiftBy 44 $ pan "1*8" # pad7 # gain (range 0.7 1 $ shrand 71)
      -- anchor
      , g $ slow 1.5 $ pad8
      , scene (randcat [0,1,2])
    ] # s "midi" # cps pat


-- rising 90
do 
  let plies = (slow 1 $ "<3 4 5>") :: Pattern (Ratio Integer)
      denom = 4
      period = 0
      hatPlyFunc = (# pad11)
      kickPlyFunc = (# gain 0.75)
      synthUp = 0
      synthDown = 0
      synthMute = id
      hatMute = g
      drumsMute = g
      kickFill = g
  d1 
    $ (|* gain 1.2)
    $ someCyclesBy period (within (0.625, 1) (const 
      $ stack [ 
        pan "~ ~ ~ ~ ~ [1 ~] ~ ~" # pad4
        , kickFill $ pan "~ ~ ~ ~ ~ [~ 1?] 1*2? 1*2?" # pad3 ]))
    $ stack [
    synthMute $ iter 8 $ struct "1(3,8)" $ pad1 --synth1
    , synthMute $ ((3/16) ~>) $ iter 8 $ struct "1(3,8)" $ pad2 -- synth2
    , hatMute $ plyWith plies (hatPlyFunc) $ slow (plies/denom) $ fast 4 $ pad12 -- hat
    , drumsMute $ plyWith plies (kickPlyFunc) $ slow (plies/denom) $ fast 4 $ pad3 -- kick
    , synthMute $ ccn 35 # ccv synthUp
    , synthMute $ ccn 36 # ccv synthUp
    , synthMute $ ccn 40 # ccv synthDown
    , synthMute $ ccn 41 # ccv synthDown
    , scene (slow 3 $ "<0>")
    ] # s "midi" # cps (160/120/2)     
    

    hush


d1 
  $ (|* gain 1.2)
  $ cpsDisc 1 1.5
  $ (|* cps "<4 2 3 2 5 1>") 
  $ someCyclesBy 0.4 (const $ stack [midichan 3 # note "c3", 
    note "[0,2,4,16,14]" # midichan 15 # gain 0] # s "midi" )
    $ shift
    $ someCyclesBy 0.3 rev
    $ stack [
    superimpose (# note "[2,4,16,14]") 
      $ plyWith "<20 10 15>" (|* legato 0.85) $ note "[0]" # s "midi" # midichan 15 # legato 0.9
    , plyWith "<20 10 15>" (|* gain 0.98) $ midichan "[2]" # s "midi" # note "c3" ]
   # cps 0.25

   hush


   d1
    $ (|* gain 1.2)
    $ someCyclesBy 0.3 g
    $ shiftBy 83911
    $ degradeBy 0.1
    $ shiftBy 4
    $ stack [
      sometimes one $ shiftBy 389 $ pan "1(<5 7 3>,16,<0 5 6 9 4>)" # midichan 2 # note "c3"
      , roll 0.3 $ pan "~ 1" # midichan 3 # note "c3"
      , sometimesBy 0.15 (# midichan 11) 
        $ shift $ degradeBy 0.4 $ pan "1*16" # midichan 10 # note "c3"
      , pan "{1 ~ ~ ~ ~ ~ ~}%16" # midichan 7 # note "c3"
      , fast 2 $ scene (shiftBy 38999 $ randcat [0,1,2])
      , randcat [normDelay]
    ] # s "midi" # cps (160/120/2)


do
  let plies = "<3 3 3 5 5 5>"
      denom = "<8 16 8 8 12 6>"
  d1 
    $ degradeBy 0.5
    $ shift
    $ cpsDisc 1 1
    $ stack [
      plyWith plies (# gain 0.7) $ slow (plies/denom) $ pad3
      , plyWith plies (# pad11) $ slow (plies/denom) $ pad12
      , (|+ note "<0 0 12 0 2 10>") $ pad6      
      , scene (randcat [0,1,2])
      , pan "~ 1" # pad7
    ] # s "midi" # cps (160/120/2)


d1 silence

    hush

d2 
  $ fast (segment 1 $ shiftBy 3 $ choose [0.5,0.6..1.5])
  $ stack [
    fast (segment 1 $ shiftBy 1000 $ choose [0.5,0.6..1.5]) $ ccn 1 # ccv (range 0 127 $ shrand 101) 
    , fast (segment 1 $ shiftBy 1000 $ choose [0.5,0.6..1.5]) $ ccn 2 # ccv (range 0 127 $ shrand 102) 
    , fast (segment 1 $ shiftBy 10001 $ choose [0.5,0.6..1.5]) $ ccn 3 # ccv (range 0 127 $ shrand 103) 
    , fast (segment 1 $ shiftBy 10002 $ choose [0.5,0.6..1.5]) $ ccn 4 # ccv (range 0 127 $ shrand 104) 
    , fast (segment 1 $ shiftBy 10003 $ choose [0.5,0.6..1.5]) $ ccn 5 # ccv (range 0 127 $ shrand 105) 
    , fast (segment 1 $ shiftBy 10004 $ choose [0.5,0.6..1.5]) $ ccn 6 # ccv (range 0 127 $ shrand 106) 
    , fast (segment 1 $ shiftBy 10005 $ choose [0.5,0.6..1.5]) $ ccn 7 # ccv (range 0 127 $ shrand 107) 
    , fast (segment 1 $ shiftBy 10006 $ choose [0.5,0.6..1.5]) $ ccn 8 # ccv (range 0 127 $ shrand 108) 
    , fast (segment 1 $ shiftBy 10007 $ choose [0.5,0.6..1.5]) $ ccn 9 # ccv (range 0 127 $ shrand 109) 
    , fast (segment 1 $ shiftBy 10008 $ choose [0.5,0.6..1.5]) $ ccn 10 # ccv (range 0 127 $ shrand 1010) 
    , fast (segment 1 $ shiftBy 10009 $ choose [0.5,0.6..1.5]) $ ccn 11 # ccv (range 0 127 $ shrand 1011) 
    , fast (segment 1 $ shiftBy 100011 $ choose [0.5,0.6..1.5]) $ ccn 12 # ccv (range 0 127 $ shrand 1012) 
    , fast (segment 1 $ shiftBy 100012 $ choose [0.5,0.6..1.5]) $ ccn 13 # ccv (range 0 127 $ shrand 1013) 
    , fast (segment 1 $ shiftBy 100013 $ choose [0.5,0.6..1.5]) $ ccn 14 # ccv (range 0 127 $ shrand 1014) 
    , fast (segment 1 $ shiftBy 100014 $ choose [0.5,0.6..1.5]) $ ccn 15 # ccv (range 0 127 $ shrand 1015) 
    , fast (segment 1 $ shiftBy 100015 $ choose [0.5,0.6..1.5]) $ ccn 16 # ccv (range 0 127 $ shrand 1016) 
    , fast (segment 1 $ shiftBy 100016 $ choose [0.5,0.6..1.5]) $ ccn 17 # ccv (range 0 127 $ shrand 1017) 
    , fast (segment 1 $ shiftBy 100017 $ choose [0.5,0.6..1.5]) $ ccn 18 # ccv (range 0 127 $ shrand 1018) 
    , fast (segment 1 $ shiftBy 100018 $ choose [0.5,0.6..1.5]) $ ccn 19 # ccv (range 0 127 $ shrand 1019) 
    , fast (segment 1 $ shiftBy 100019 $ choose [0.5,0.6..1.5]) $ ccn 20 # ccv (range 0 127 $ shrand 1020) 
  ] #  s "midi" # midichan 15 

  hush

    hush


    d1 
      $ fast 4 $ ccn 16 # ccv (range 0 127 $ shrand 1020) 
      # s "midi" # midichan 15     

hush