

let pat5 = limit $ stack [
    (# hpf (range 40 1000 $ slow 3.5 sine))
    $ (# hpq (range 0 0.1 $ slow 2.5 sine))
    $ (|* cps ( (discretise 1.5 $ range 0.5 2 $ shrand 155) * (range 0.25 2 $ slow 3.5 sine) * (range 0.25 2 $ slow 4.5 sine)))
    $ (# room (range 0.1 0.9 $ slow 4.333 sine))
    $ (# size (range 0.1 0.95 $ slow 4.125 sine))
    $ plyWith "<10 20 15 7 5 30>" (# gain 0.9) 
    $ s "[bd2]" 
    # n "[1 2 3 4 5]/40" 
    # cps "<6 2 4 2 1>"]

let pat3pat = (someCyclesBy 0.5 (const $ "{1 0 0}%16") $ shift' 7766 $ "1(<10 7 5 13>,16,<0 2 0 2 4>)") :: Pattern Bool

let pat3 =
        limit
        $ someCyclesBy 0.2 (shift' 7 . degradeBy 0.7)
        $ shift
        $ whenmod 8 4 (foldEvery [2,3] ((0.0625 * 7) ~>))
        $ someCyclesBy 0.5 (within (0.5, 1) (const 
            $ stack [ 
                s "~ ~ long ~" # cut 2 # gain 0
                , sometimes roll' $ shift' 4 $ s "~ ~ sd ~" 
                    # hpf 80
                    # n "{0 1}%15" 
                    # speed (foldEvery [3,4] ((1.05)*) $ "1") 
                    # cut 1 
                    # end 0.8]))
        $ shift' 88301
        $ stack [
            struct pat3pat $ s "bd" # cut 1 # n 1
            , (# n "[1 2]*3") $ (# speed "{0.5 1 0.5 1 0.5}%12") $ struct pat3pat $ s "long" # cut 2 
            , struct (inv pat3pat) $ s "perc2" # speed 1 # n 1
        ] # cps (160/120/2)

        hush

let pat3b =
        limit
        $ someCyclesBy 0.2 (shift' 7 . degradeBy 0.7)
        $ shift
        $ whenmod 8 4 (foldEvery [2,3] ((0.0625 * 7) ~>))
        $ someCyclesBy 0.5 (within (0.5, 1) (const 
            $ stack [ 
                s "~ ~ pad1 ~" # cut 2 # gain 0
                , sometimes roll' $ shift' 4 $ s "~ ~ sd ~" 
                    # hpf 80
                    # n "{0 1}%15" 
                    # speed (foldEvery [3,4] ((1.05)*) $ "1") 
                    # cut 1 
                    # end 0.8]))
        $ shift' 88301
        $ stack [
            struct pat3pat $ s "bd" # cut 1 # n 1
            , (# n (discretise (1/8) $ shift' 90 $ irand 10)) $ (# speed (discretise (1/4) $ shift' 7 $ choose [1])) $ struct pat3pat $ s "pad1" 
                # cut 2 # begin 0.1
                # gain 1.1
            , struct (inv pat3pat) $ s "perc2" # speed 1 # n 1
        ] # cps (160/120/2)




let pat3flow = 
                limit 
                $ shift
                $ stack [ 
                    (# n (slow 100 $ run 10)) 
                        $ (|* cps ( (discretise 1 $ range 0.5 1.5 $ shrand 3892) * (range 0.5 1.5 $ slow 3.5 sine) * (range 0.5 1.5 $ slow 5.25 sine) ) )
                        $ plyWith "<10 15 5 7>" (|* legato 0.9) 
                        $ s "pad1" # legato (range 1 1.5 $ slow 15 sine) # begin 0.1 # cps "<6 2 4 2 1>" # gain 1.1 # cut 2
                    , plyWith "<10 15 5 7>" (# gain 0.9) $ s "[bd:1, perc:0]", 
                    (3 ~>) $ slow 5 $ s "sd" # n 0 # hpf 100]

        hush

d1 $ someCyclesBy 0 (const $ pat3) $ shift $ pat5

d1 $ someCyclesBy 0.25 (const $ pat3) $ shift $ pat5

d1 $ someCyclesBy 0.5 (const $ pat3) $ shift $ pat5

d1 $ someCyclesBy 0.75 (const $ pat3) $ shift $ pat5

d1 $ someCyclesBy 0 (const $ pat5) $ shift $ pat3

-- not sure about this one
d1 $ someCyclesBy 0.5 (const $ pat5) $ shift $ pat3

d1 $ someCyclesBy 1 (const $ pat5) $ shift $ pat3

d1 $ someCyclesBy 0.3 (const $ pat3b) $ shift $ someCyclesBy 0.3 (const $ pat5) $ shift $ pat3

d1 $ someCyclesBy 0.8 (const $ pat3b) $ pat3

d1 $ someCyclesBy 1 (const $ pat3b) $ shift $ pat3

d1 $ someCyclesBy 0.3 (const $ pat3flow) $ shift $ pat3b

d1 $ someCyclesBy 0.5 (const $ pat3flow) $ shift $ pat3b

d1 $ someCyclesBy 0.75 (const $ pat3flow) $ shift $ pat3b

d1 $ pat3flow

hush

