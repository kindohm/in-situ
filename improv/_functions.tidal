let 
  shift p = (1024 ~>) $ p
  shift' num p = (num ~>) $ p
  shiftBy = shift'
  shrand num = shiftBy num $ rand
  gtfo p = (const $ s "~") $ p 
  g = gtfo
  one p = off (0.0625) id $ p
  roll howOften p = sometimesBy howOften (stutWith 2 (0.0625*3) id) $ shift $ p
  rollBy nums howOften p = sometimesBy howOften (stutWith nums (0.0625*3) id) $ shift $ p
  rollSlow howOften p = sometimesBy howOften (stutWith 2 (0.125*3) id) $ shift $ p
  stdnote = note "-24"
  rytm = s "midi"
  pad1 = midichan 0 # stdnote # rytm
  pad2 = midichan 1 # stdnote # rytm
  pad3 = midichan 2 # stdnote # rytm
  pad4 = midichan 3 # stdnote # rytm
  pad5 = midichan 4 # stdnote # rytm
  pad6 = midichan 5 # stdnote # rytm
  pad7 = midichan 6 # stdnote # rytm
  pad8 = midichan 7 # stdnote # rytm
  pad9 = midichan 8 # stdnote # rytm
  pad10 = midichan 9 # stdnote # rytm
  pad11 = midichan 10 # stdnote # rytm
  pad12 = midichan 11 # stdnote # rytm
  unfollowedChan = midichan 15
  discRange a b = (discretise 1 $ range a b $ shrand 10003)
  discrange = discRange
  triRange a b c = (range a b $ slow c tri)
  trirange = triRange
  cpsDisc a b = (|* cps (discRange a b))
  cpsRange a b c = (|* cps (triRange a b c))
  cpsTri = cpsRange
  randDelay = stack [ slow 2.13 $ ccn 45 # ccv (shiftBy 5544 $ choose [0,127]) -- d
                      , slow 1.13 $ ccn 46 # ccv (range 0 127 $ shrand 9988) -- dt
                      , slow 3.1 $ ccn 47 # ccv (range 0 127 $ shrand 19988) ] # s "midi"
  normDelay = stack [ ccn 45 # ccv 0, ccn 46 # ccv 0, ccn 47 # ccv 0 ] # s "midi"
  scene x = ccn 92 # ccv x
  replicator text1 = [putStr (text1) | x <- replicate 500 text1]
  flood text2 = sequence_(replicator text2)
  
let unfollowed = 
                  (|* gain 1.1)
                  $ slow 8 $ stack [
                    note "[0,-2,7,14]" 
                    , ccn "1*16" # ccv (range 0 127 $ slow 5 tri) 
                    , ccn "2*16" # ccv (range 0 127 $ slow 6 tri) 
                    , ccn "3*16" # ccv (range 0 127 $ slow 4 tri) 
                    , ccn "4*16" # ccv (range 0 127 $ slow 5.74 tri) 
                    , ccn "5*16" # ccv (range 0 127 $ slow 4.32839 tri) 
                    , ccn "6*16" # ccv (range 0 127 $ slow 6.827 tri) 
                  ] # unfollowedChan # s "midi"
    unfollowedDrums plies denom mult1 mult2 period muteDrums muteHats drumFunc hatFunc revOften = 
                      (|* gain 1.2)
                      $ someCyclesBy period (within (0.75,0.95) (const 
                        $ stack [ 
                          pan "~ ~ ~ ~ 1" # ccn 7 # ccv 0 # unfollowedChan 
                          , pan "~ ~ ~ ~ 1" # pad4
                          ] ))
                      $ shift
                      $ someCyclesBy revOften rev
                      $ stack [
                        plyWith (plies) id $ ccn 7 # ccv 100 # midichan 15      
                        , muteDrums $ plyWith (plies * mult1) drumFunc $ slow (plies/denom) $ fast denom $ pad3
                        , muteHats $ plyWith (plies * mult2) hatFunc $ slow (plies/denom) $ fast denom $ pad12
                      ] # cps (125/120/2) # rytm
    twoxbd pat times plyFunc superKick superHat synthFilter bendUp bendDown kickHold period muteKick muteHat revFreq = 
                      (# cps (pat * 0.5))
                      $ (|* gain 1.2) 
                      $ someCyclesBy revFreq rev
                      $ shift
                      $ someCyclesBy period (within (0.5,1) (const $ struct "~ 1" $ pad8))
                      $ stack [ 
                        (# gain 0.8) $ plyWith ((times/) $ pat) plyFunc $ superimpose (# pad2) $ pad1 -- notes
                        , muteKick $ plyWith ((times/) $ pat) plyFunc $ every superKick (superimpose (# pad4)) $ pad3 -- kicks
                        , muteHat $ plyWith ((times/) $ pat) plyFunc $ every superHat (superimpose (# pad12)) $ pad11 -- hats
                        , pad7
                        , fast 4 $ ccn 40 # ccv synthFilter
                        , fast 4 $ ccn 35 # ccv bendUp
                        , fast 4 $ ccn 36 # ccv bendDown
                        , fast 4 $ ccn 37 # ccv kickHold
                        ] 
                        # rytm
    scrape pat times period bassPlyFunc kickPlyFunc hatPlyFunc amb1Mute amb2Mute drumsMute snareMute bassMute bassLfoDepth bassLfoRate amb2LfoRate amb2LfoDepth = 
                        (|* gain 1.1)
                        $ (# cps pat)
                        $ someCyclesBy period (within (0.5,1) (const $ struct "~ 1" $ pad4))
                        $ stack [
                            amb1Mute $ slow 4 $ pad6 
                            , amb2Mute $ slow 4.1 $ pad5
                            , bassMute $ plyWith ((times/) $ pat) bassPlyFunc $ pad1 # legato 1
                            , drumsMute $ plyWith ((times/) $ pat) kickPlyFunc $ pad3
                            , drumsMute $ plyWith ((times/) $ pat) hatPlyFunc $ pad12
                            , snareMute $ (4 ~>) $ slow 4 $ pad2
                            , bassMute $ ccn 35 # ccv bassLfoDepth
                            , bassMute $ ccn 36 # ccv bassLfoRate
                            , amb2Mute $ ccn 40 # ccv amb2LfoRate
                            , amb2Mute $ ccn 41 # ccv amb2LfoDepth
                        ]
                        # rytm
    rising plies denom period kickPlyFunc hatPlyFunc synthMute hatMute drumsMute synthUp synthDown kickFill = 
                        (|* gain 1.2)
                        $ someCyclesBy period (within (0.625, 1) (const $ stack [ pan "~ ~ ~ ~ ~ [1 ~] ~ ~" # pad4, kickFill $ pan "~ ~ ~ ~ ~ [~ 1?] 1*2? 1*2?" # pad3 ]))
                        $ stack [
                        synthMute $ iter 8 $ struct "1(3,8)" $ pad1 --synth1
                        , synthMute $ ((3/16) ~>) $ iter 8 $ struct "1(3,8)" $ pad2 -- synth2
                        , hatMute $ plyWith plies (hatPlyFunc) $ slow (plies/denom) $ fast 4 $ pad12 -- hat
                        , drumsMute $ plyWith plies (kickPlyFunc) $ slow (plies/denom) $ fast 4 $ pad3 -- kick
                        , synthMute $ ccn 35 # ccv synthUp
                        , synthMute $ ccn 36 # ccv synthUp
                        , synthMute $ ccn 40 # ccv synthDown
                        , synthMute $ ccn 41 # ccv synthDown
                        ] # s "midi" # cps (160/120/2)                
    cantsynth = 
                stack [
                  ccn "1*4" # ccv (range 1 126 $ slow 20 tri)
                  , ccn "3*4" # ccv (range 1 126 $ slow 22 tri)
                  , ccn "4*4" # ccv (range 70 126 $ slow 19.333 tri)
                  , ccn "5*4" # ccv (range 1 126 $ slow 18.389 tri)
                  , ccn "6*4" # ccv (range 40 90 $ slow 17.189 tri)
                  , ccn "7*4" # ccv (range 1 126 $ slow 16 tri)
                  , (|+ note "-7") 
                    $ slow 4 
                    $ note "{[0 4] 2 -24 ~ [ 4 11] ~ ~ [0] [14 16] ~ 11 ~ ~}%16" 
                    # gain 1.05
                  ] # s "midi" # midichan 12    
    cantdrums plies denom period kickPlyFunc hatPlyFunc kickMute hatMute rollMute percMute = 
                (|* gain 1.2)
                $ someCyclesBy period (within (0.625,1) (const $ s "~ [~ midi ~ ~]" # note "-24" # midichan 3))
                $ stack [
                  kickMute $ plyWith plies kickPlyFunc 
                    $ slow (plies/denom) $ fast 2 $ midichan 2 # note "-36"
                  , hatMute $ plyWith plies hatPlyFunc
                    $ slow (plies/denom) $ fast 2 $ pad12
                  , rollMute $ rollSlow 1 $ pad5
                  , percMute $ degradeBy 0.3 $ shift 
                    $ pan "1*16" # midichan (shiftBy 9 $ choose [6,7]) # note "-24" # gain (range 0.7 1 $ shrand 74)
                ] # s "midi" # cps (160/120/2)                  
    patton = stack [
                  jux (slow 1.021 . (# speed 0.94)) 
                    $ s "pattonfull" # begin 0.57 # end 0.65 # speed 0.95
                    # hpf 1000
                    # lpf 10000
                ] # cps 0.5